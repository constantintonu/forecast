package p

import (
	"encoding/json"
	"fmt"
	"os"
	"time"
)

// forecastOpenweatherStruct: https://openweathermap.org/api/one-call-api
// Autogenerated from https://mholt.github.io/json-to-go/
type forecastOpenweatherStruct struct {
	Lat      float64 `json:"lat"`
	Lon      float64 `json:"lon"`
	Timezone string  `json:"timezone"`
	Current  struct {
		Dt         int64   `json:"dt"`
		Sunrise    int     `json:"sunrise"`
		Sunset     int     `json:"sunset"`
		Temp       float64 `json:"temp"`
		FeelsLike  float64 `json:"feels_like"`
		Pressure   int     `json:"pressure"`
		Humidity   int     `json:"humidity"`
		Uvi        float64 `json:"uvi"`
		Clouds     int     `json:"clouds"`
		Visibility int     `json:"visibility"`
		WindSpeed  float64 `json:"wind_speed"`
		WindDeg    float64 `json:"wind_deg"`
		Weather    []struct {
			ID          int    `json:"id"`
			Main        string `json:"main"`
			Description string `json:"description"`
			Icon        string `json:"icon"`
		} `json:"weather"`
		Rain struct {
			OneH float64 `json:"1h"`
		} `json:"rain"`
	} `json:"current"`
	Hourly []struct {
		Dt        int64   `json:"dt"`
		Temp      float64 `json:"temp"`
		FeelsLike float64 `json:"feels_like"`
		Pressure  int     `json:"pressure"`
		Humidity  int     `json:"humidity"`
		Clouds    int     `json:"clouds"`
		WindSpeed float64 `json:"wind_speed"`
		WindDeg   float64 `json:"wind_deg"`
		Weather   []struct {
			ID          int    `json:"id"`
			Main        string `json:"main"`
			Description string `json:"description"`
			Icon        string `json:"icon"`
		} `json:"weather"`
		Rain struct {
			OneH float64 `json:"1h"`
		} `json:"rain"`
	} `json:"hourly"`
	Daily []struct {
		Dt      int64 `json:"dt"`
		Sunrise int   `json:"sunrise"`
		Sunset  int   `json:"sunset"`
		Temp    struct {
			Day   float64 `json:"day"`
			Min   float64 `json:"min"`
			Max   float64 `json:"max"`
			Night float64 `json:"night"`
			Eve   float64 `json:"eve"`
			Morn  float64 `json:"morn"`
		} `json:"temp"`
		FeelsLike struct {
			Day   float64 `json:"day"`
			Night float64 `json:"night"`
			Eve   float64 `json:"eve"`
			Morn  float64 `json:"morn"`
		} `json:"feels_like"`
		Pressure  int     `json:"pressure"`
		Humidity  int     `json:"humidity"`
		WindSpeed float64 `json:"wind_speed"`
		WindDeg   float64 `json:"wind_deg"`
		Weather   []struct {
			ID          int    `json:"id"`
			Main        string `json:"main"`
			Description string `json:"description"`
			Icon        string `json:"icon"`
		} `json:"weather"`
		Clouds int     `json:"clouds"`
		Rain   float64 `json:"rain"`
		Uvi    float64 `json:"uvi"`
	} `json:"daily"`
}

// openweatherIcon map openweather weather conditions to Yahoo icon
// check https://erikflowers.github.io/weather-icons/api-list.html
var openweatherIcon = map[string]string{
	"01d": "32",
	"02d": "34",
	"03d": "30",
	"04d": "30",
	"09d": "9",
	"10d": "5",
	"11d": "3",
	"13d": "14",
	"50d": "20",
	"01n": "31",
	"02n": "33",
	"03n": "29",
	"04n": "29",
	"09n": "9",
	"10n": "5",
	"11n": "3",
	"13n": "13",
	"50n": "20",
}

// OpenweatheProvider provider
type OpenweatheProvider struct {
	URL              string
	Key              string
	Timeout          int
	ForecastDays     int
	ForecastUnits    string
	LocationProvider Location
}

// NewOpenweather creates a integration with Openweather provider
func NewOpenweather(location Location) (OpenweatheProvider, error) {
	var key = os.Getenv("openweather_key")
	var url = "https://api.openweathermap.org/data/2.5"

	if len(key) == 0 {
		return OpenweatheProvider{}, fmt.Errorf("openweather_key variable not defined")
	}

	return OpenweatheProvider{
		URL:              url,
		Key:              key,
		Timeout:          10,
		ForecastDays:     6,
		ForecastUnits:    "metric",
		LocationProvider: location,
	}, nil
}

// GetForecastFromName get Forecast using a name as direction
func (o OpenweatheProvider) GetForecastFromName(name string) (ForecastAPIV1Struct, error) {

	// Get Location Geocordinades
	location, err := o.LocationProvider.GetLocationFromName(name)
	if err != nil {
		return ForecastAPIV1Struct{}, err
	}
	latString := fmt.Sprintf("%f", location.LatLng.Lat)
	lngString := fmt.Sprintf("%f", location.LatLng.Lng)

	url := fmt.Sprintf("%s/onecall?lat=%s&lon=%s&appid=%s&units=%s", o.URL, latString, lngString, o.Key, o.ForecastUnits)

	// fetch api, returns body
	forecastByte, err := fetchAPI(url, o.Timeout)
	if err != nil {
		return ForecastAPIV1Struct{}, err
	}

	// Convert body to forecast Openweather struct
	forecast := forecastOpenweatherStruct{}
	err = json.Unmarshal(forecastByte, &forecast)
	if err != nil {
		return ForecastAPIV1Struct{}, err
	}

	// Convert location, and forecast Openweather struct to forecast api v1
	res, err := o.forecastAPIV1(location, forecast)
	if err != nil {
		return ForecastAPIV1Struct{}, err
	}
	return res, nil
}

// forecastAPIV1 forecast struct convert
func (o *OpenweatheProvider) forecastAPIV1(location LocationAPIV1Struct, forecast forecastOpenweatherStruct) (ForecastAPIV1Struct, error) {
	var res ForecastAPIV1Struct
	var date time.Time
	var err error

	date = time.Unix(forecast.Current.Dt, 0)
	res.Current.LastUpdated = date
	res.Location.Name = location.Name
	res.Current.TempC = forecast.Current.Temp
	res.Current.Condition.Text = forecast.Current.Weather[0].Description
	res.Current.Condition.Icon = o.yahooMapIcon(forecast.Current.Weather[0].Icon)
	res.Current.PrecipMm = forecast.Current.Rain.OneH
	res.Current.WindKph = forecast.Current.WindSpeed
	res.Current.WindDir, err = DegToCardinal(forecast.Current.WindDeg)
	if err != nil {
		return ForecastAPIV1Struct{}, err
	}

	for k, v := range forecast.Daily {
		if k == 0 {
			continue
		}
		if k > o.ForecastDays {
			break
		}
		var forecastday ForecastdayAPIV1Struct

		date = time.Unix(v.Dt, 0)
		forecastday.Date = date

		forecastday.Day.Condition.Text = v.Weather[0].Description
		forecastday.Day.Condition.Icon = o.yahooMapIcon(v.Weather[0].Icon)
		forecastday.Day.AvgtempC = v.Temp.Day
		forecastday.Day.MaxtempC = v.Temp.Max
		forecastday.Day.MintempC = v.Temp.Min

		res.Forecast.Forecastday = append(res.Forecast.Forecastday, forecastday)
	}

	return res, nil
}

// yahooMapIcon convert from Openweather weather conditions to Yahoo icon
// check https://erikflowers.github.io/weather-icons/api-list.html
func (o *OpenweatheProvider) yahooMapIcon(condition string) string {
	api := "yahoo"

	if value, present := openweatherIcon[condition]; present {
		return (fmt.Sprintf("%s-%s", api, value))
	}
	return (fmt.Sprintf("%s-32", api)) // Other condition is sunny :)
}
